'''
Filename: anonymize_core.py
This is a template for handling anonymization DICOM file.
Using pydicom and hashlib.SHA256
Input will be a text
Output will be a hashed value generated by SHA256 hashing function.
Created by: Xudong Zhang
Last Modification: 13/05/2019 8:06pm
'''
import os
import pydicom
import hashlib

'''
    Pydicom: dicom file
    hashlib: hashing
'''
#   Hash the input with SHA256 method
def SHA256(input_text):
    #   Strings are stored as Unicode in python3, using encode() to convert the string into utf-8 encoded.
    #   hexdigest() is a function that returns a hexadecimal-digits string object of double length.
    #   SHA256_output is a string.
    SHA256_output = hashlib.sha256(input_text.encode('utf-8')).hexdigest()
    return SHA256_output

#   Read from .dcm file and show the dataset
def ParseDICOM(file_name):
    curr_patient_dicom = pydicom.dcmread(file_name)
    print(curr_patient_dicom)
    print(curr_patient_dicom.Manufacturer)

#   As an example, hash the Manufacturer with SHA256 of the original data.
#   And return a modified data set
def SHA_DICOM(file_name):
    curr_hashed_dicom = pydicom.dcmread(file_name)
    curr_hashed_dicom.Manufacturer = SHA256(str(curr_hashed_dicom.Manufacturer))
    return curr_hashed_dicom

#   Displaying the original dicom data
print("===== Original dicom data =====")
ParseDICOM('/home/xudong/ct.dcm')

#   Hash it (Manufacturer)
new_hashed_dicom = SHA_DICOM('/home/xudong/ct.dcm')
#   Display the hashed dicom data
print(new_hashed_dicom)
#   Export it to a new .dcm file
new_hashed_dicom.save_as("hashed_ct.dcm")
